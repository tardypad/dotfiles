#!/usr/bin/env zsh

COMMAND=${0:t}
ENV_DIR_PATH=${0:A:h}/tmux_env

init_variables() {
  AVAILABLE_TARGETS=( $(
    ls "${ENV_DIR_PATH}"
  ) )

  TARGET=
  SESSION=
  SKIP=false

  HOST=localhost
  SOCKET=default
}


usage() {
  cat << EOF
usage: ${COMMAND} [<options>] <target> [<session>]

Start target tmux environment sessions
Each target is a different local or remote tmux server

Options:
  -h,  --help     show this message only

Available targets: ${AVAILABLE_TARGETS}
If session is not defined, all of the target's ones are started
EOF
}


error() {
  if [[ -n "$1" ]]; then
    echo "error: $1" >&2
  fi
  usage
  exit 1
}


get_session_pattern() {
  local session_name="$1"

  local session_pattern=''
  for i in $( seq 0 $(( ${#session_name} - 1 )) ); do
    local char="${session_name:$i:1}"
    local char_low=$( echo "${char}" | tr 'A-Z_' 'a-z ' )
    local char_up=$( echo "${char}" | tr 'a-z ' 'A-Z_' )
    session_pattern+="[${char_low}${char_up}]"
  done

  echo "${session_pattern}"
}


is_session_present() {
  local session_names="$1"
  local session_pattern="$2"

  for session_name in ${(f)session_names}; do
    if [[ "${session_name}" =~ "${session_pattern}" ]]; then
      return 0
    fi
  done

  return 1
}


start_target_tmux_env() {
  source "${ENV_DIR_PATH}/${TARGET}/env"

  local scripts_path
  if [[ -n "${SESSION}" ]]; then
    scripts_path=(
      "${ENV_DIR_PATH}/${TARGET}/${SESSION}.sh"
    )
  else
    scripts_path=( $(
      ls "${ENV_DIR_PATH}/${TARGET}"/*.sh
    ) )
  fi

  if [[ "${HOST}" == 'localhost' ]]; then
    local session_names=$(
      tmux -L "${SOCKET}" list-sessions -F '#{session_name}' 2> /dev/null
    )
    for script_path in ${scripts_path}; do
      local session_name="${script_path:t:r}"
      local session_pattern=".*$( get_session_pattern "${session_name}" ).*"
      if ! is_session_present "${session_names}" "${session_pattern}"; then
        zsh "${script_path}" "${SOCKET}"
      fi
    done

    if [[ -n "${SESSION}" ]]; then
      local session_pattern="*$( get_session_pattern "${SESSION}" )*"
      tmux -L "${SOCKET}" attach-session -t "${session_pattern}"
    else
      tmux -L "${SOCKET}" attach-session
    fi

  else

    local session_names=$(
      ssh "${HOST}" "tmux -L ${SOCKET} list-sessions -F '#{session_name}'" 2> /dev/null
    )
    for script_path in ${scripts_path}; do
      local session_name="${script_path:t:r}"
      local session_pattern=".*$( get_session_pattern "${session_name}" ).*"
      if ! is_session_present "${session_names}" "${session_pattern}"; then
        ssh "${HOST}" 'bash -s' < "${script_path}" "${SOCKET}"
      fi
    done

    if [[ -n "${SESSION}" ]]; then
      local session_pattern="*$( get_session_pattern "${SESSION}" )*"
      ssh -t "${HOST}" tmux -L "${SOCKET}" attach-session -t "${session_pattern}"
    else
      ssh -t "${HOST}" tmux -L "${SOCKET}" attach-session
    fi
  fi
}


parse_options() {
  while [[ "$#" -gt 0 ]]; do
    case "$1" in
      -h|--help)
        usage
        exit 0
        ;;
      -s|--skip)
        SKIP=true
        shift
        ;;
      *)
        break 2
        ;;
    esac
  done

  [[ $# -eq 0 ]] && error 'missing target'

  TARGET="$1"
  SESSION="$2"
}


validate_options() {
  # validate target
  if ! (( ${AVAILABLE_TARGETS[(Ie)${TARGET}]} )); then
    error "invalid target ${TARGET}"
  fi

  # validate target's session if present
  if [[ -n "${SESSION}" ]] \
       && [[ ! -f "${ENV_DIR_PATH}/${TARGET}/${SESSION}.sh" ]]; then
    error "invalid target's session ${SESSION}"
  fi
}


init_variables
parse_options "$@"
validate_options

start_target_tmux_env
