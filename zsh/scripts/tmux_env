#!/usr/bin/env zsh

# init variables
COMMAND=${0:t}
ENV_DIR_PATH="${XDG_CONFIG_HOME:-$HOME/.config}/tmux/env/"

AVAILABLE_TARGETS=( $(
  ls "${ENV_DIR_PATH}"
) )
BACKGROUND=false

TARGET=
SESSIONS=

# variables coming from env files
HOST=localhost
SOCKET=default


usage() {
  cat << EOF
usage: ${COMMAND} [<options>] <target> [<session>...]

Start target tmux environment sessions
Each target is a different local or remote tmux server

Options:
  -b,  --background     launch in background, no attach
  -h,  --help           show this message only

Available targets: ${AVAILABLE_TARGETS}
If no session is defined, all of the target's ones are started
EOF
}


error() {
  if [[ -n "$1" ]]; then
    echo "error: $1" >&2
  fi
  usage
}


get_session_pattern() {
  local session_name="$1"

  local session_pattern=''
  for i in $( seq 0 $(( ${#session_name} - 1 )) ); do
    local char="${session_name:$i:1}"
    local char_low=$( echo "${char}" | tr 'A-Z_' 'a-z ' )
    local char_up=$( echo "${char}" | tr 'a-z ' 'A-Z_' )
    session_pattern+="[${char_low}${char_up}]"
  done

  echo "${session_pattern}"
}


is_session_present() {
  local session_names="$1"
  local session_pattern="$2"

  for session_name in ${(f)session_names}; do
    if [[ "${session_name}" =~ "${session_pattern}" ]]; then
      return 0
    fi
  done

  return 1
}


start_target_tmux_env() {
  source "${ENV_DIR_PATH}/${TARGET}/env"

  local scripts_path=()
  local main_session_pattern=

  if [[ -n "${SESSIONS}" ]]; then
    for session in ${SESSIONS}; do
      scripts_path+=(
        "${ENV_DIR_PATH}/${TARGET}/${session}.sh"
      )
    done
    main_session_pattern="*$( get_session_pattern "${session}" )*"
  else
    scripts_path=( $(
      ls "${ENV_DIR_PATH}/${TARGET}"/*.sh
    ) )
  fi

  if [[ "${HOST}" == 'localhost' ]]; then
    local session_names=$(
      tmux -L "${SOCKET}" list-sessions -F '#{session_name}' 2> /dev/null
    )
    for script_path in ${scripts_path}; do
      local session_name="${script_path:t:r}"
      local session_pattern=".*$( get_session_pattern "${session_name}" ).*"
      if ! is_session_present "${session_names}" "${session_pattern}"; then
        zsh "${script_path}" "${SOCKET}"
      fi
    done

    if ! $BACKGROUND; then
      if [[ -n "${main_session_pattern}" ]]; then
        tmux -L "${SOCKET}" attach-session -t "${main_session_pattern}"
      else
        tmux -L "${SOCKET}" attach-session
      fi
    elif [[ -n "${main_session_pattern}" ]]; then
      tmux -L "${SOCKET}" switch-client -t "${main_session_pattern}" &> /dev/null
    fi

  else

    local session_names=$(
      ssh "${HOST}" "tmux -L ${SOCKET} list-sessions -F '#{session_name}'" 2> /dev/null
    )
    for script_path in ${scripts_path}; do
      local session_name="${script_path:t:r}"
      local session_pattern=".*$( get_session_pattern "${session_name}" ).*"
      if ! is_session_present "${session_names}" "${session_pattern}"; then
        ssh "${HOST}" 'bash -s' < "${script_path}" "${SOCKET}"
      fi
    done

    if ! $BACKGROUND; then
      if [[ -n "${main_session_pattern}" ]]; then
        ssh -t "${HOST}" tmux -L "${SOCKET}" attach-session -t "${main_session_pattern}"
      else
        ssh -t "${HOST}" tmux -L "${SOCKET}" attach-session
      fi
    elif [[ -n "${main_session_pattern}" ]]; then
      ssh -t "${HOST}" tmux -L "${SOCKET}" switch-client -t "${main_session_pattern}" &> /dev/null
    fi
  fi
}


# parse options
while [[ "$#" -gt 0 ]]; do
  case "$1" in
    -b|--background)
      BACKGROUND=true
      shift
      ;;
    -h|--help)
      usage
      return 0
      ;;
    *)
      break 2
      ;;
  esac
done

if [[ $# -eq 0 ]]; then
  error 'missing target'
  return 1
fi

TARGET="$1"
SESSIONS=( ${@:2} )

# validate target
if ! (( ${AVAILABLE_TARGETS[(Ie)${TARGET}]} )); then
  error "invalid target ${TARGET}"
  return 1
fi

# validate target's sessions if present
for session in ${SESSIONS}; do
  if [[ ! -f "${ENV_DIR_PATH}/${TARGET}/${session}.sh" ]]; then
    error "invalid target's session ${session}"
    return 1
  fi
done


start_target_tmux_env
