#!/usr/bin/env zsh

COMMAND=${0:t}

init_variables() {
  ONLY_DIFF=0

  MAIN_PACKAGES=
  EXTRA_PACKAGES=
  EXTENSIONS=
}


usage() {
  cat <<- EOF
	usage: ${COMMAND} [<options>]

	Check and report packages versions:
	- version installed on the system
	- version listed in the main README
	- version listed in the package individual README

	Needs to be run from the repository root

	Options:
	  -d,  --diff    only list packages where versions are different
	  -h,  --help    show this message only
	EOF
}


error() {
  [[ -z "$1" ]] || echo "${COMMAND}: $1"
  echo "Try '${COMMAND} --help' for more information."
  exit 1
} >&2


main_readme_version() {
  local package="$1"

  sed -n "s#^| \[${package}\].*| \[\(.*\)\].*#\1#p" README.md
}

extra_readme_version() {
  local package="$1"

  sed -n "s#^| ${package} .*| \[\(.*\)\].*#\1#p" README.md
}


individual_readme_version() {
  local package="$1"

  sed -n 's#^Version \[\(.*\)\].*#\1#p' "packages/${package}/README.md"
}


extension_readme_version() {
  local extension="$1"

  sed -n "s#^| ${extension} .*| \[\(.*\)\].*#\1#p" packages/*/README.md
}


pacman_version() {
  local package="$1"

  [[ "${package}" == 'gron' ]] && package='gron-bin'

  local pacman_info=$(
    pacman --query --info "${package}" 2> /dev/null
  )

  if [[ -z "${pacman_info}" ]]; then
    # try with -git suffix if package couldn't be found
    local pacman_info=$(
      pacman --query --info "${package}-git" 2> /dev/null
    )
  fi

  if [[ -z "${pacman_info}" ]]; then
    echo 'unknown'
    return
  fi

  # extract version without the release number
  echo "${pacman_info}" \
    | sed -n 's/^Version *: \(.*\)\-[0-9]*/\1/p'
}


report_main_packages() {
  for package in ${MAIN_PACKAGES}; do
    local version1=$( pacman_version "${package}" )
    local version2=$( main_readme_version "${package}" )
    local version3=$( individual_readme_version "${package}" )

    if [[ "${ONLY_DIFF}" -eq 1
       && "${version1}" == "${version2}"
       && "${version2}" == "${version3}" ]]; then
      continue
    fi

    printf '%s %s %s %s\n' \
      "${package}" \
      "${version1}" \
      "${version2}" \
      "${version3}"
  done
}


report_extra_packages() {
  for package in ${EXTRA_PACKAGES}; do
    local version1=$( pacman_version "${package}" )
    local version2=$( extra_readme_version "${package}" )

    if [[ "${ONLY_DIFF}" -eq 1
       && "${version1}" == "${version2}" ]]; then
      continue
    fi

    printf '%s %s %s .\n' \
      "${package}" \
      "${version1}" \
      "${version2}"
  done
}


report_extensions() {
  for extension in ${EXTENSIONS}; do
    local version1=$( pacman_version "${extension}" )
    local version3=$( extension_readme_version "${extension}" )

    if [[ "${ONLY_DIFF}" -eq 1
       && "${version1}" == "${version3}" ]]; then
      continue
    fi

    printf '%s %s . %s\n' \
      "${extension}" \
      "${version1}" \
      "${version3}"
  done
}


report_all() {
  MAIN_PACKAGES=($(
    sed -n 's#^| \[\([^ ]*\)\].*#\1#p' README.md
  ))

  EXTRA_PACKAGES=($(
    sed -n 's#^| \([a-z][^ ]*\) .*#\1#p' README.md
  ))

  # exclude vim and weechat plugins (not managed by package manager)
  EXTENSIONS=($(
    sed -n 's#^| \([a-z][^ ]*\) .*#\1#p' \
      $(
        find packages -maxdepth 2 -type f -name README.md \
          ! -path '*/vim/*' ! -path '*/weechat/*'
      )
  ))

  {
    report_main_packages;
    report_extra_packages;
    report_extensions;
  } \
    | column --table
}


parse_options() {
  while [[ "$#" -gt 0 ]]; do
    case "$1" in
      -d|--diff)
        ONLY_DIFF=1
        shift;
        ;;
      -h|--help)
        usage
        exit 0
        ;;
      *)
        error "Invalid option '$1'"
        ;;
    esac
  done
}


init_variables
parse_options "$@"

report_all
