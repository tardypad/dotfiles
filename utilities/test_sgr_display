#!/bin/sh

# https://gist.github.com/XVilka/8346728
# https://en.wikipedia.org/wiki/ANSI_escape_code

init_variables() {
  COMMAND=${0##*/}

  # default run
  BIT_TYPE=4
  LINE_TYPE='foreground'
  COLUMN_TYPE='background'
  DISPLAY_TYPE='background'

  # minimum 4 bit text length is 12
  # so that it fits longest possible column title
  TEXT_4BIT='    Abc!    '
  TEXT_8BIT=''
  TEXT_24BIT='#'

  # SGR parameters
  RESET=0
  BOLD=1
  FAINT=2
  ITALIC=3
  UNDERLINE=4
  BLINK=5
  REVERSE=7
  CONCEAL=8
  CROSSED_OUT=9
  FOREGROUND_BLACK=30
  FOREGROUND_RED=31
  FOREGROUND_GREEN=32
  FOREGROUND_YELLOW=33
  FOREGROUND_BLUE=34
  FOREGROUND_MAGENTA=35
  FOREGROUND_CYAN=36
  FOREGROUND_WHITE=37
  FOREGROUND_RGB=38
  FOREGROUND_DEFAULT=39
  BACKGROUND_BLACK=40
  BACKGROUND_RED=41
  BACKGROUND_GREEN=42
  BACKGROUND_YELLOW=43
  BACKGROUND_BLUE=44
  BACKGROUND_MAGENTA=45
  BACKGROUND_CYAN=46
  BACKGROUND_WHITE=47
  BACKGROUND_RGB=48
  BACKGROUND_DEFAULT=49
  FOREGROUND_BRIGHT_BLACK=90
  FOREGROUND_BRIGHT_RED=91
  FOREGROUND_BRIGHT_GREEN=92
  FOREGROUND_BRIGHT_YELLOW=93
  FOREGROUND_BRIGHT_BLUE=94
  FOREGROUND_BRIGHT_MAGENTA=95
  FOREGROUND_BRIGHT_CYAN=96
  FOREGROUND_BRIGHT_WHITE=97
  BACKGROUND_BRIGHT_BLACK=100
  BACKGROUND_BRIGHT_RED=101
  BACKGROUND_BRIGHT_GREEN=102
  BACKGROUND_BRIGHT_YELLOW=103
  BACKGROUND_BRIGHT_BLUE=104
  BACKGROUND_BRIGHT_MAGENTA=105
  BACKGROUND_BRIGHT_CYAN=106
  BACKGROUND_BRIGHT_WHITE=107

  RGB_24BIT=2
  RGB_8BIT=5
}

show_usage() {
  cat <<- EOF
	usage: ${COMMAND} [<options>] [ 4 [<line>] [<column>] | 8 [<display>] | 24 [<display>] ]

	Test the display of colors and attributes

	 4 bit: 16 colors
	 8 bit: 256 colors
	24 bit: true color

	Options:
	  -h      show this message only

	Available line and column arguments for 4 bit test:
	- foreground        / fg (default line)
	- background        / bg (default column)
	- attribute         / att
	- bright_foreground / brfg
	- bright_background / brbg

	Available display arguments for 8 and 24 bit tests:
	- foreground / fg
	- background / bg (default)
	EOF
}

parse_command_line() {
  while getopts h OPT; do
    case "${OPT}" in
      h) show_usage; exit 0 ;;
      ?) exit_error ;;
    esac
  done

  shift $(( OPTIND - 1 ))

  [ -n "$1" ] && BIT_TYPE="$1"

  if [ "${BIT_TYPE}" = '4' ]; then
    [ -n "$2" ] && LINE_TYPE="$2"
    [ -n "$3" ] && COLUMN_TYPE="$3"
  else
    [ -n "$2" ] && DISPLAY_TYPE="$2"
  fi
}

validate_command_line() {
  if [ "${BIT_TYPE}" != '4' ] \
    && [ "${BIT_TYPE}" != '8' ] \
    && [ "${BIT_TYPE}" != '24' ]; then
    exit_error "invalid bit type '${BIT_TYPE}'"
  fi

  if [ "${BIT_TYPE}" = '4' ]; then
    [ "${LINE_TYPE}" = 'fg' ] && LINE_TYPE=foreground
    [ "${LINE_TYPE}" = 'bg' ] && LINE_TYPE=background
    [ "${LINE_TYPE}" = 'att' ] && LINE_TYPE=attribute
    [ "${LINE_TYPE}" = 'brfg' ] && LINE_TYPE=bright_foreground
    [ "${LINE_TYPE}" = 'brbg' ] && LINE_TYPE=bright_background
    [ "${COLUMN_TYPE}" = 'fg' ] && COLUMN_TYPE=foreground
    [ "${COLUMN_TYPE}" = 'bg' ] && COLUMN_TYPE=background
    [ "${COLUMN_TYPE}" = 'att' ] && COLUMN_TYPE=attribute
    [ "${COLUMN_TYPE}" = 'brfg' ] && COLUMN_TYPE=bright_foreground
    [ "${COLUMN_TYPE}" = 'brbg' ] && COLUMN_TYPE=bright_background

    if [ "${LINE_TYPE}" != 'foreground' ] \
      && [ "${LINE_TYPE}" != 'background' ] \
      && [ "${LINE_TYPE}" != 'attribute' ] \
      && [ "${LINE_TYPE}" != 'bright_foreground' ] \
      && [ "${LINE_TYPE}" != 'bright_background' ]; then
      exit_error "invalid line type '${LINE_TYPE}'"
    fi

    if [ "${COLUMN_TYPE}" != 'foreground' ] \
      && [ "${COLUMN_TYPE}" != 'background' ] \
      && [ "${COLUMN_TYPE}" != 'attribute' ] \
      && [ "${COLUMN_TYPE}" != 'bright_foreground' ] \
      && [ "${COLUMN_TYPE}" != 'bright_background' ]; then
      exit_error "invalid column type '${COLUMN_TYPE}'"
    fi

  else
    [ "${DISPLAY_TYPE}" = 'fg' ] && DISPLAY_TYPE=foreground
    [ "${DISPLAY_TYPE}" = 'bg' ] && DISPLAY_TYPE=background

    if [ "${DISPLAY_TYPE}" != 'foreground' ] \
      && [ "${DISPLAY_TYPE}" != 'background' ]; then
      exit_error "invalid display type '${DISPLAY_TYPE}'"
    fi
  fi
}

exit_error() {
  [ -z "$1" ] || echo "${COMMAND}: $1"
  printf "Try '%s -h' for more information.\n" "${COMMAND}"
  exit 1
} >&2

print_sgr() {
  seq='0'
  for i in "$@"; do
    seq="${seq};$i"
  done
  printf '\033[%sm' "${seq}"
}

print_text() {
  text="$1"
  shift
  print_sgr "$@"
  printf '%s' "${text}"
  print_sgr "${RESET}"
}

print_4bit_text()  { print_text "${TEXT_4BIT}" "$@"; }
print_8bit_text()  { print_text "${TEXT_8BIT}" "$@"; }
print_24bit_text() { print_text "${TEXT_24BIT}" "$@"; }

print_4bit_header() {
  printf "%${#TEXT_4BIT}s"

  case "${COLUMN_TYPE}" in
    foreground|background)
      printf "%-${#TEXT_4BIT}s" 'default'
      printf "%-${#TEXT_4BIT}s" 'black'
      printf "%-${#TEXT_4BIT}s" 'red'
      printf "%-${#TEXT_4BIT}s" 'green'
      printf "%-${#TEXT_4BIT}s" 'yellow'
      printf "%-${#TEXT_4BIT}s" 'blue'
      printf "%-${#TEXT_4BIT}s" 'magenta'
      printf "%-${#TEXT_4BIT}s" 'cyan'
      printf "%-${#TEXT_4BIT}s" 'white'
      ;;
    attribute)
      printf "%-${#TEXT_4BIT}s" 'default'
      printf "%-${#TEXT_4BIT}s" 'bold'
      printf "%-${#TEXT_4BIT}s" 'faint'
      printf "%-${#TEXT_4BIT}s" 'italic'
      printf "%-${#TEXT_4BIT}s" 'underline'
      printf "%-${#TEXT_4BIT}s" 'blink'
      printf "%-${#TEXT_4BIT}s" 'reverse'
      printf "%-${#TEXT_4BIT}s" 'conceal'
      printf "%-${#TEXT_4BIT}s" 'crossed-out'
      ;;
    bright_foreground|bright_background)
      printf "%-${#TEXT_4BIT}s" 'default'
      printf "%-${#TEXT_4BIT}s" 'brblack'
      printf "%-${#TEXT_4BIT}s" 'brred'
      printf "%-${#TEXT_4BIT}s" 'brgreen'
      printf "%-${#TEXT_4BIT}s" 'bryellow'
      printf "%-${#TEXT_4BIT}s" 'brblue'
      printf "%-${#TEXT_4BIT}s" 'brmagenta'
      printf "%-${#TEXT_4BIT}s" 'brcyan'
      printf "%-${#TEXT_4BIT}s" 'brwhite'
      ;;
  esac

  printf '\n'
}

print_4bit_line() {
  name="$1"
  code="$2"

  printf "%${#TEXT_4BIT}s" "${name}"
  print_4bit_columns_"${COLUMN_TYPE}" "${code}"
  printf '\n'
}

print_4bit_lines_foreground() {
  print_4bit_line 'default' "${FOREGROUND_DEFAULT}"
  print_4bit_line 'black'   "${FOREGROUND_BLACK}"
  print_4bit_line 'red'     "${FOREGROUND_RED}"
  print_4bit_line 'green'   "${FOREGROUND_GREEN}"
  print_4bit_line 'yellow'  "${FOREGROUND_YELLOW}"
  print_4bit_line 'blue'    "${FOREGROUND_BLUE}"
  print_4bit_line 'magenta' "${FOREGROUND_MAGENTA}"
  print_4bit_line 'cyan'    "${FOREGROUND_CYAN}"
  print_4bit_line 'white'   "${FOREGROUND_WHITE}"
}

print_4bit_lines_background() {
  print_4bit_line 'default' "${BACKGROUND_DEFAULT}"
  print_4bit_line 'black'   "${BACKGROUND_BLACK}"
  print_4bit_line 'red'     "${BACKGROUND_RED}"
  print_4bit_line 'green'   "${BACKGROUND_GREEN}"
  print_4bit_line 'yellow'  "${BACKGROUND_YELLOW}"
  print_4bit_line 'blue'    "${BACKGROUND_BLUE}"
  print_4bit_line 'magenta' "${BACKGROUND_MAGENTA}"
  print_4bit_line 'cyan'    "${BACKGROUND_CYAN}"
  print_4bit_line 'white'   "${BACKGROUND_WHITE}"
}

print_4bit_lines_attribute() {
  print_4bit_line 'default'
  print_4bit_line 'bold'        "${BOLD}"
  print_4bit_line 'faint'       "${FAINT}"
  print_4bit_line 'italic'      "${ITALIC}"
  print_4bit_line 'underline'   "${UNDERLINE}"
  print_4bit_line 'blink'       "${BLINK}"
  print_4bit_line 'reverse'     "${REVERSE}"
  print_4bit_line 'conceal'     "${CONCEAL}"
  print_4bit_line 'crossed-out' "${CROSSED_OUT}"
}

print_4bit_lines_bright_foreground() {
  print_4bit_line 'default'   "${FOREGROUND_DEFAULT}"
  print_4bit_line 'brblack'   "${FOREGROUND_BRIGHT_BLACK}"
  print_4bit_line 'brred'     "${FOREGROUND_BRIGHT_RED}"
  print_4bit_line 'brgreen'   "${FOREGROUND_BRIGHT_GREEN}"
  print_4bit_line 'bryellow'  "${FOREGROUND_BRIGHT_YELLOW}"
  print_4bit_line 'brblue'    "${FOREGROUND_BRIGHT_BLUE}"
  print_4bit_line 'brmagenta' "${FOREGROUND_BRIGHT_MAGENTA}"
  print_4bit_line 'brcyan'    "${FOREGROUND_BRIGHT_CYAN}"
  print_4bit_line 'brwhite'   "${FOREGROUND_BRIGHT_WHITE}"
}

print_4bit_lines_bright_background() {
  print_4bit_line 'default'   "${BACKGROUND_DEFAULT}"
  print_4bit_line 'brblack'   "${BACKGROUND_BRIGHT_BLACK}"
  print_4bit_line 'brred'     "${BACKGROUND_BRIGHT_RED}"
  print_4bit_line 'brgreen'   "${BACKGROUND_BRIGHT_GREEN}"
  print_4bit_line 'bryellow'  "${BACKGROUND_BRIGHT_YELLOW}"
  print_4bit_line 'brblue'    "${BACKGROUND_BRIGHT_BLUE}"
  print_4bit_line 'brmagenta' "${BACKGROUND_BRIGHT_MAGENTA}"
  print_4bit_line 'brcyan'    "${BACKGROUND_BRIGHT_CYAN}"
  print_4bit_line 'brwhite'   "${BACKGROUND_BRIGHT_WHITE}"
}

print_4bit_columns_foreground() {
  line_code="$1"

  print_4bit_text "${line_code}" "${FOREGROUND_DEFAULT}"
  print_4bit_text "${line_code}" "${FOREGROUND_BLACK}"
  print_4bit_text "${line_code}" "${FOREGROUND_RED}"
  print_4bit_text "${line_code}" "${FOREGROUND_GREEN}"
  print_4bit_text "${line_code}" "${FOREGROUND_YELLOW}"
  print_4bit_text "${line_code}" "${FOREGROUND_BLUE}"
  print_4bit_text "${line_code}" "${FOREGROUND_MAGENTA}"
  print_4bit_text "${line_code}" "${FOREGROUND_CYAN}"
  print_4bit_text "${line_code}" "${FOREGROUND_WHITE}"
}

print_4bit_columns_background() {
  line_code="$1"

  print_4bit_text "${line_code}" "${BACKGROUND_DEFAULT}"
  print_4bit_text "${line_code}" "${BACKGROUND_BLACK}"
  print_4bit_text "${line_code}" "${BACKGROUND_RED}"
  print_4bit_text "${line_code}" "${BACKGROUND_GREEN}"
  print_4bit_text "${line_code}" "${BACKGROUND_YELLOW}"
  print_4bit_text "${line_code}" "${BACKGROUND_BLUE}"
  print_4bit_text "${line_code}" "${BACKGROUND_MAGENTA}"
  print_4bit_text "${line_code}" "${BACKGROUND_CYAN}"
  print_4bit_text "${line_code}" "${BACKGROUND_WHITE}"
}

print_4bit_columns_attribute() {
  line_code="$1"

  print_4bit_text "${line_code}"
  print_4bit_text "${line_code}" "${BOLD}"
  print_4bit_text "${line_code}" "${FAINT}"
  print_4bit_text "${line_code}" "${ITALIC}"
  print_4bit_text "${line_code}" "${UNDERLINE}"
  print_4bit_text "${line_code}" "${BLINK}"
  print_4bit_text "${line_code}" "${REVERSE}"
  print_4bit_text "${line_code}" "${CONCEAL}"
  print_4bit_text "${line_code}" "${CROSSED_OUT}"
}

print_4bit_columns_bright_foreground() {
  line_code="$1"

  print_4bit_text "${line_code}" "${FOREGROUND_DEFAULT}"
  print_4bit_text "${line_code}" "${FOREGROUND_BRIGHT_BLACK}"
  print_4bit_text "${line_code}" "${FOREGROUND_BRIGHT_RED}"
  print_4bit_text "${line_code}" "${FOREGROUND_BRIGHT_GREEN}"
  print_4bit_text "${line_code}" "${FOREGROUND_BRIGHT_YELLOW}"
  print_4bit_text "${line_code}" "${FOREGROUND_BRIGHT_BLUE}"
  print_4bit_text "${line_code}" "${FOREGROUND_BRIGHT_MAGENTA}"
  print_4bit_text "${line_code}" "${FOREGROUND_BRIGHT_CYAN}"
  print_4bit_text "${line_code}" "${FOREGROUND_BRIGHT_WHITE}"
}

print_4bit_columns_bright_background() {
  line_code="$1"

  print_4bit_text "${line_code}" "${BACKGROUND_DEFAULT}"
  print_4bit_text "${line_code}" "${BACKGROUND_BRIGHT_BLACK}"
  print_4bit_text "${line_code}" "${BACKGROUND_BRIGHT_RED}"
  print_4bit_text "${line_code}" "${BACKGROUND_BRIGHT_GREEN}"
  print_4bit_text "${line_code}" "${BACKGROUND_BRIGHT_YELLOW}"
  print_4bit_text "${line_code}" "${BACKGROUND_BRIGHT_BLUE}"
  print_4bit_text "${line_code}" "${BACKGROUND_BRIGHT_MAGENTA}"
  print_4bit_text "${line_code}" "${BACKGROUND_BRIGHT_CYAN}"
  print_4bit_text "${line_code}" "${BACKGROUND_BRIGHT_WHITE}"
}

print_24bit() {
  if [ "${DISPLAY_TYPE}" = 'foreground' ]; then
    rgb_code="${FOREGROUND_RGB}"
  else
    rgb_code="${BACKGROUND_RGB}"
    TEXT_24BIT=' '
  fi

  for i in $( seq 0 76 ); do
    r=$(( 255 - ( i * 255 / 76 ) ))
    g=$(( i * 510 / 76 ))
    b=$(( i * 255 / 76 ))

    if [ "${g}" -gt 255 ]; then
      g=$(( 510 - g ))
    fi

    print_24bit_text "${rgb_code}" "${RGB_24BIT}" "${r}" "${g}" "${b}"
  done

  printf '\n'
}

print_8bit_block() {
  start="$1"
  end="$2"

  if [ "${DISPLAY_TYPE}" = 'foreground' ]; then
    rgb_code="${FOREGROUND_RGB}"
  else
    rgb_code="${BACKGROUND_RGB}"
  fi

  for i in $(seq "${start}" "${end}"); do
    TEXT_8BIT=$( printf ' %3s' "$i" )
    print_8bit_text "${rgb_code}" "${RGB_8BIT}" "$i"
  done
}

print_8bit() {
  printf 'standard colors\n'
  print_8bit_block 0 7
  printf '\n\n'

  printf 'bright colors\n'
  print_8bit_block 8 15
  printf '\n\n'

  printf 'colors cube\n'
  cube_start=16
  cube_size=6
  for i in $( seq 1 "${cube_size}" ); do
    block_start=$(( cube_start + ( i - 1 ) * cube_size * cube_size ))
    block_end=$(( block_start + cube_size * cube_size - 1 ))
    print_8bit_block "${block_start}" "${block_end}"
    printf '\n'
  done
  printf '\n'

  printf 'grayscale\n'
  print_8bit_block 232 255
  printf '\n'
}

test_colors() {
  case "${BIT_TYPE}" in
    4)
      print_4bit_header
      "print_4bit_lines_${LINE_TYPE}"
      ;;
    8)
      print_8bit
      ;;
    24)
      print_24bit
      ;;
  esac
}

init_variables
parse_command_line "$@"
validate_command_line

test_colors
