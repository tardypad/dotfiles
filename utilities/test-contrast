#!/bin/sh

init_variables() {
  COMMAND=${0##*/}

  TEST_TEXT='Abc!'
  HEX_COLORS=
}

show_usage() {
  cat <<- EOF
	usage: ${COMMAND} <color1> <color2> ...

	Test the base colors contrast to each other

	Colors need to be specified in the hexadecimal format without # prefix

	Options:
	  -h     show this message only
	EOF
}

parse_command_line() {
  while getopts h OPT; do
    case "${OPT}" in
      h) show_usage; exit 0 ;;
      ?) exit_error ;;
    esac
  done

  shift $(( OPTIND - 1 ))

  HEX_COLORS="$*"

  # read hex values from stdin if no argument specified
  if [ -z "${HEX_COLORS}" ]; then
    while read -r HEX_COLOR; do
      HEX_COLORS="${HEX_COLORS} ${HEX_COLOR}"
    done
  fi
}

# shellcheck disable=SC2120
exit_error() {
  [ -z "$1" ] || echo "${COMMAND}: $1"
  printf "Try '%s -h' for more information.\n" "${COMMAND}"
  exit 1
} >&2

print_contrast() {
  RGB1="$1"
  RGB2="$2"

  printf '\033[0m'                   # reset
  printf '\033[38;2;%sm' "${RGB1}"   # use rgb1 for foreground
  printf '\033[48;2;%sm' "${RGB2}"   # use rgb2 for background
  printf '  %s  ' "${TEST_TEXT}"     # spacing
  printf '\033[0m'                   # reset
}

hex_to_rgb() {
  HEX_R=$(echo "$1" | cut -c 1-2)
  HEX_G=$(echo "$1" | cut -c 3-4)
  HEX_B=$(echo "$1" | cut -c 5-6)

  # use ; as a delimiter between the RGB components
  # to be able to directly use the full value inside ANSI escape sequences
  printf "%d;%d;%d\n" "0x${HEX_R}" "0x${HEX_G}" "0x${HEX_B}"
}

test_contrast() {
  for HEX1 in ${HEX_COLORS}; do
    for HEX2 in ${HEX_COLORS}; do
      RGB1=$( hex_to_rgb "${HEX1}" )
      RGB2=$( hex_to_rgb "${HEX2}" )
      print_contrast "${RGB1}" "${RGB2}"
    done
    printf '\n'
  done
}

init_variables
parse_command_line "$@"

test_contrast
