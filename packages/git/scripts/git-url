#!/usr/bin/env bash


init_variables() {
  COMMAND=${0##*/}
  GIT_COMMAND=${COMMAND#*-}

  TYPE=repo
  COMMIT=HEAD
  REMOTE=$( git config --default origin browse.remote )
}


usage() {
  cat <<- EOF
	usage: git ${GIT_COMMAND} [<options>]

	Display an URL related to the repo or a commit
	Based on remote config using an URL alias and "browse" config

	Options:
	    -c, --commit     commit to select information (default HEAD)
	    -h               show this message only
	    -r, --remote     remote to use (default origin)
	    -t, --type       URL type (default repo)

	Valid types:
	- repo: general URL of the repo
	- commit: URL of the selected commit
	- issue: URL of the issue related to selected commit
	- review: URL of the review related to selected commit
	EOF
}


error() {
  [[ -z "$1" ]] || echo "${COMMAND}: $1"
  echo "Try 'git ${GIT_COMMAND} -h' for more information."
  exit 1
} >&2


display_url() {
  local remote_alias=$(
    git config "remote.${REMOTE}.url" \
    | sed 's/:.*//'
  )

  local repo_path_sed=$(
    git config "browse.${remote_alias}.repoPathSed"
  )
  [[ -z "${repo_path_sed}" ]] && error 'remote does not use a valid URL alias for browsing'

  local repo_path=$(
    git config "remote.${REMOTE}.url" \
    | sed "${repo_path_sed}"
  )

  local url=$(
    git config "browse.${remote_alias}.${TYPE}Url" \
    | sed "s|{repo_path}|${repo_path}|"
  )
  [[ -z "${url}" ]] && error 'remote does not support this type of URL for browsing'

  case "${TYPE}" in
    repo)
      echo "${url}"
      ;;
    commit)
      commit_id=$( git rev-parse "${COMMIT}" )
      echo "${url//\{commit_id\}/${commit_id}}"
      ;;
    issue)
      issue_id=$( git commit-issue-id "${COMMIT}" )
      [[ -z "${issue_id}" ]] && error 'commit has not issue id linked to it'
      echo "${url//\{issue_id\}/${issue_id}}"
      ;;
    review)
      review_id=$( git commit-review-id "${COMMIT}" )
      [[ -z "${review_id}" ]] &&  error 'commit has not review id linked to it'
      echo "${url//\{review_id\}/${review_id}}"
      ;;
  esac
}


parse_options() {
  while [[ "$#" -gt 0 ]]; do
    case "$1" in
      --commit|-c)
        [[ -n "$2" ]] || error 'Missing commit value'
        COMMIT="$2"
        shift 2
        ;;
      -h)
        usage
        exit 0
        ;;
      --remote|-r)
        [[ -n "$2" ]] || error 'Missing remote value'
        REMOTE="$2"
        shift 2
        ;;
      --type|-t)
        [[ -n "$2" ]] || error 'Missing type value'
        TYPE="$2"
        shift 2
        ;;
      *)
        break
        ;;
    esac
  done
}


validate_options() {
  if [[ "${TYPE}" != 'repo'
     && "${TYPE}" != 'commit'
     && "${TYPE}" != 'issue'
     && "${TYPE}" != 'review' ]]; then
    error "invalid type argument '${TYPE}'"
  fi

  if ! git rev-parse --quiet --verify "${COMMIT}^{commit}" > /dev/null; then
    error "invalid commit '${COMMIT}'"
  fi

  if ! git remote | grep -q "${REMOTE}"; then
    error "invalid remote '${REMOTE}'"
  fi
}


init_variables
parse_options "$@"
validate_options

display_url
