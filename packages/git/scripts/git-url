#!/bin/sh
# commands used:
# - git

init_variables() {
  COMMAND=${0##*/}
  GIT_COMMAND=${COMMAND#*-}

  TYPE=repo
  COMMIT=HEAD
  REMOTE=$( git config --default origin browse.remote )
}

usage() {
  cat <<- EOF
	usage: git ${GIT_COMMAND} [<options>]

	Display an URL related to the repo or a commit
	Based on remote config using an URL alias and "browse" config

	Options:
	    -c     commit to select information (default HEAD)
	    -h     show this message only
	    -r     remote to use (default origin)
	    -t     URL type (default repo)

	Valid types:
	- repo: general URL of the repo
	- commit: URL of the selected commit
	- issue: URL of the issue related to selected commit
	- review: URL of the review related to selected commit
	EOF
}

error() {
  [ -z "$1" ] || echo "${COMMAND}: $1"
  echo "Try 'git ${GIT_COMMAND} -h' for more information."
  exit 1
} >&2

display_url() {
  REMOTE_ALIAS=$(
    git config "remote.${REMOTE}.url" \
    | sed 's/:.*//'
  )

  REPO_PATH_SED=$(
    git config "browse.${REMOTE_ALIAS}.repoPathSed"
  )
  [ -z "${REPO_PATH_SED}" ] && error 'remote does not use a valid URL alias for browsing'

  REPO_PATH=$(
    git config "remote.${REMOTE}.url" \
    | sed "${REPO_PATH_SED}"
  )

  URL=$(
    git config "browse.${REMOTE_ALIAS}.${TYPE}Url" \
    | sed "s|{repo_path}|${REPO_PATH}|"
  )
  [ -z "${URL}" ] && error 'remote does not support this type of URL for browsing'

  case "${TYPE}" in
    repo)
      echo "${URL}"
      ;;
    commit)
      COMMIT_ID=$( git rev-parse "${COMMIT}" )
      echo "${URL}" | sed "s/{commit_id}/${COMMIT_ID}/"
      ;;
    issue)
      ISSUE_ID=$( git commit-issue-id "${COMMIT}" )
      [ -z "${ISSUE_ID}" ] && error 'commit has no issue id linked to it'
      echo "${URL}" | sed "s/{issue_id}/${ISSUE_ID}/"
      ;;
    review)
      REVIEW_ID=$( git commit-review-id "${COMMIT}" )
      [ -z "${REVIEW_ID}" ] &&  error 'commit has no review id linked to it'
      echo "${URL}" | sed "s/{review_id}/${REVIEW_ID}/"
      ;;
  esac
}

parse_options() {
  while getopts c:hr:t: OPT; do
    case "${OPT}" in
      c) COMMIT="${OPTARG}" ;;
      h) usage; exit 0 ;;
      r) REMOTE="${OPTARG}" ;;
      t) TYPE="${OPTARG}" ;;
      ?) error ;;
    esac
  done

  shift $(( OPTIND - 1 ))
}

validate_options() {
  if [ "${TYPE}" != 'repo' ] \
     && [ "${TYPE}" != 'commit' ] \
     && [ "${TYPE}" != 'issue' ] \
     && [ "${TYPE}" != 'review' ]; then
    error "invalid type argument '${TYPE}'"
  fi

  if ! git rev-parse -q --verify "${COMMIT}^{commit}" > /dev/null; then
    error "invalid commit '${COMMIT}'"
  fi

  if ! git remote | grep -q "${REMOTE}"; then
    error "invalid remote '${REMOTE}'"
  fi
}

init_variables
parse_options "$@"
validate_options

display_url
