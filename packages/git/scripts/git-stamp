#!/usr/bin/env bash


init_variables() {
  COMMAND=${0##*/}
  GIT_COMMAND=${COMMAND#*-}

  REPLACE=false
  unset ID
  unset MSG
}


usage() {
  cat <<- EOF
	usage: git ${GIT_COMMAND} [<options>] <id> [<messages>]

	Amend last commit with a stamp message prefixed by an identifier

	Options:
	    -h               show this message only
	    -r, --replace    replace all previous stamps with same id
	                     this is case insensitive
	EOF
}


error() {
  [[ -z "$1" ]] || echo "${COMMAND}: $1"
  echo "Try 'git ${GIT_COMMAND} -h' for more information."
  exit 1
} >&2


stamp() {
  local commit_msg=$( git log -1 --pretty=%B )
  local stamp_msg
  [[ -n "${MSG}" ]] && stamp_msg="${ID} ${MSG}" || stamp_msg="${ID}"

  if ${REPLACE}; then
    # remove previous stamps with same ID from the commit message
    commit_msg=$(
      echo "${commit_msg}" \
        | grep --ignore-case --invert-match "^${ID}\b" \
        | cat -s
    )
  fi

  # append the stamp to the commit message in a new paragraph
  git commit --amend \
    --message "${commit_msg}" \
    --message "${stamp_msg}" \
    > /dev/null

  # show result
  git log -1 --pretty=full
}


parse_options() {
  while [[ "$#" -gt 0 ]]; do
    case "$1" in
      -h)
        usage
        exit 0
        ;;
      --replace|-r)
        REPLACE=true
        shift
        ;;
      *)
        break
        ;;
    esac
  done

  ID="$1"
  MSG="${@:2}"
}


validate_options() {
  # ID should be set to non-empty string
  if [[ -z "${ID}" ]]; then
    error "missing stamp identifier"
  fi
}


init_variables
parse_options "$@"
validate_options

stamp
