#!/bin/sh
# commands used:
# - git

# "heavily inspired" by Gary Bernhardt's dotfiles script
# https://github.com/garybernhardt/dotfiles/blob/master/bin/run-command-on-git-revisions

init_variables() {
  COMMAND=${0##*/}

  INITIAL_REV=
  REV_RANGE=
  RUN_COMMAND=
  QUIET=false
}

error() {
  [ -z "$1" ] || echo "${COMMAND}: $1"
  exit 1
} >&2

abort_if_dirty_repo() {
  if ! git rev-parse --git-dir > /dev/null 2>&1; then
    error 'not in a git repository'
  fi

  if ! git diff-index --quiet --cached HEAD; then
    error 'you have staged but not committed changes that would be lost'
  fi

  if ! git diff-files --quiet; then
    error 'you have unstaged changes that would be lost'
  fi

  UNTRACKED=$( git ls-files --exclude-standard --others )
  if [ -n "${UNTRACKED}" ]; then
    error 'you have untracked files that could be overwritten'
  fi
}

save_initial_rev() {
  if git symbolic-ref HEAD > /dev/null 2>&1; then
    INITIAL_REV=$( git symbolic-ref --short HEAD )
  else
    INITIAL_REV=$( git rev-parse HEAD )
  fi
}

restore_initial_rev() {
  git checkout -q "${INITIAL_REV}"
}

run_command_over_range() {
  for REVISION in $( git rev-list --reverse "${REV_RANGE}" ); do
    [ "${QUIET}" = 'false' ] && echo "Checking out: $( git log --oneline -1 "${REVISION}" )"
    git checkout -q "${REVISION}"
    eval "${RUN_COMMAND}"
    git reset --hard -q
  done
}

parse_options() {
  while getopts q OPT; do
    case "${OPT}" in
      q) QUIET=true ;;
      ?) error ;;
    esac
  done

  shift $(( OPTIND - 1 ))

  REV_RANGE="$1"
  shift 2> /dev/null
  RUN_COMMAND="$*"
}

validate_options() {
  if [ -z "${REV_RANGE}" ]; then
    error 'no revisions range'
  fi

  if [ -z "${RUN_COMMAND}" ]; then
    error 'no command to run'
  fi
}

init_variables
parse_options "$@"
validate_options

abort_if_dirty_repo
save_initial_rev
run_command_over_range
restore_initial_rev
