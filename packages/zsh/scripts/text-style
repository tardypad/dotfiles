#!/usr/bin/env zsh

COMMAND=${0:t}

init_variables() {
  AVAILABLE_STYLES=(
    'upside_down'
    'full_width'
    'mocking_spongebob'
  )

  NAME=
}


usage() {
  cat <<- EOF
	usage: ${COMMAND} [<options>] name [text]

	Transform a text to a certain style

	Options:
	  -h,  --help    show this message only

	Available styles name: ${AVAILABLE_STYLES}
	EOF
}


error() {
  [[ -z "$1" ]] || echo "${COMMAND}: $1"
  echo "Try '${COMMAND} --help' for more information."
  exit 1
} >&2


style_upside_down() {
  local result_text=

  # can't use tr on non ascii characters...
  for (( i=0; i<${#TEXT}; i++ )); do
    case "${TEXT:$i:1}" in
      'a') result_text+='ɐ' ;;
      'b') result_text+='q' ;;
      'c') result_text+='ɔ' ;;
      'd') result_text+='p' ;;
      'e') result_text+='ǝ' ;;
      'f') result_text+='ɟ' ;;
      'g') result_text+='ɓ' ;;
      'h') result_text+='ɥ' ;;
      'i') result_text+='ᴉ' ;;
      'j') result_text+='ɾ' ;;
      'k') result_text+='ʞ' ;;
      'l') result_text+='l' ;;
      'm') result_text+='ɯ' ;;
      'n') result_text+='u' ;;
      'o') result_text+='o' ;;
      'p') result_text+='d' ;;
      'q') result_text+='b' ;;
      'r') result_text+='ɹ' ;;
      's') result_text+='s' ;;
      't') result_text+='ʇ' ;;
      'u') result_text+='n' ;;
      'v') result_text+='ʌ' ;;
      'w') result_text+='ʍ' ;;
      'x') result_text+='x' ;;
      'y') result_text+='ʎ' ;;
      'z') result_text+='z' ;;
      ' ') result_text+=' ' ;;
      # ignore other characters for now
    esac
  done

  echo "${result_text}" | rev
}


style_mocking_spongebob() {
  # start clean lowercase
  local text=$( echo "${TEXT}" | tr A-Z a-z )

  local result_text=

  for (( i=0; i<${#TEXT}; i++ )); do
    if [[ $(( RANDOM % 2)) -eq 0 ]]; then
      result_text+="${TEXT:$i:1}"
    else
      result_text+=$( echo "${TEXT:$i:1}" | tr a-z A-Z )
    fi
  done

  echo "${result_text}"
}


style_full_width() {
  echo "${TEXT}" \
    | tr a-z A-Z \
    | sed --regexp-extended 's/(.)/\1 /g'
}


parse_options() {
  while [[ "$#" -gt 0 ]]; do
    case "$1" in
      -h|--help)
        usage
        exit 0
        ;;
      *)
        break 2
        ;;
    esac
  done

  NAME="$1"
  TEXT="${@:2}"
}


validate_options() {
  if [[ -z "${NAME}" ]]; then
    error 'missing style name'
  fi

  if ! (( ${AVAILABLE_STYLES[(Ie)${NAME}]} )); then
    error "invalid style name ${NAME}"
  fi
}


init_variables
parse_options "$@"
validate_options


if [[ -z "${TEXT}" ]]; then
  read TEXT
fi

style_$NAME "${TEXT}"
