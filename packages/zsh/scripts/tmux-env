#!/usr/bin/env zsh

COMMAND=${0:t}

init_variables() {
  ENV_DIR_PATH="${XDG_CONFIG_HOME:-$HOME/.config}/tmux/env/"

  AVAILABLE_TARGETS=( $(
    ls "${ENV_DIR_PATH}"
  ) )
  BACKGROUND=false

  TARGET=
  SESSIONS=

  # variables coming from env files
  HOST=localhost
  SOCKET=default
}


usage() {
  cat <<- EOF
	usage: ${COMMAND} [<options>] <target> [<session>...]

	Start target tmux environment sessions
	Each target is a different local or remote tmux server

	Options:
	  -b,  --background     launch in background, no attach
	  -h,  --help           show this message only

	Available targets: ${AVAILABLE_TARGETS}
	If no session is defined, all of the target's ones are started
	EOF
}


error() {
  [[ -z "$1" ]] || echo "${COMMAND}: $1"
  echo "Try '${COMMAND} --help' for more information."
  exit 1
} >&2


is_session_present() {
  local session_names="$1"
  local session="$2"

  for session_name in ${(f)session_names}; do
    if [[ "${TARGET} ${session}" = "${session_name}" ]]; then
      return 0
    fi
  done

  return 1
}


start_target_tmux_env() {
  source "${ENV_DIR_PATH}/${TARGET}/env"

  local scripts_path=()
  local main_session=

  if [[ -n "${SESSIONS}" ]]; then
    for session in ${SESSIONS}; do
      scripts_path+=(
        "${ENV_DIR_PATH}/${TARGET}/${session}.sh"
      )
    done
    main_session="${session}"
  else
    scripts_path=( $(
      ls "${ENV_DIR_PATH}/${TARGET}"/*.sh
    ) )
  fi

  if [[ "${HOST}" == 'localhost' ]]; then
    local session_names=$(
      tmux -L "${SOCKET}" list-sessions -F '#{session_name}' 2> /dev/null
    )
    for script_path in ${scripts_path}; do
      local session="${script_path:t:r}"
      if ! is_session_present "${session_names}" "${session}"; then
        TMUX_ENV=yes zsh "${script_path}" "${SOCKET}" "${TARGET} ${session}"
      fi
    done

    if ! $BACKGROUND; then
      if [[ -n "${main_session}" ]]; then
        tmux -L "${SOCKET}" attach-session -t "${TARGET} ${main_session}"
      else
        tmux -L "${SOCKET}" attach-session
      fi
    elif [[ -n "${main_session}" ]]; then
      tmux -L "${SOCKET}" switch-client -t "${TARGET} ${main_session}" &> /dev/null
    fi

  else

    local session_names=$(
      ssh "${HOST}" "tmux -L ${SOCKET} list-sessions -F '#{session_name}'" 2> /dev/null
    )
    for script_path in ${scripts_path}; do
      local session="${script_path:t:r}"
      if ! is_session_present "${session_names}" "${session}"; then
        ssh "${HOST}" 'TMUX_ENV=yes bash -s' < "${script_path}" "${SOCKET}" "'${TARGET} ${session}'"
      fi
    done

    if ! $BACKGROUND; then
      if [[ -n "${main_session}" ]]; then
        ssh -t "${HOST}" tmux -L "${SOCKET}" attach-session -t "'${TARGET} ${main_session}'"
      else
        ssh -t "${HOST}" tmux -L "${SOCKET}" attach-session
      fi
    elif [[ -n "${main_session}" ]]; then
      ssh -t "${HOST}" tmux -L "${SOCKET}" switch-client -t "'${TARGET} ${main_session}'" &> /dev/null
    fi
  fi
}


parse_options() {
  while [[ "$#" -gt 0 ]]; do
    case "$1" in
      -b|--background)
        BACKGROUND=true
        shift
        ;;
      -h|--help)
        usage
        exit 0
        ;;
      *)
        break 2
        ;;
    esac
  done

  if [[ $# -eq 0 ]]; then
    error 'missing target'
  fi

  TARGET="$1"
  SESSIONS=( ${@:2} )
}


validate_options() {
  if [[ -n "${TMUX}" ]]; then
    error "nested tmux env is not allowed"
  fi

  if ! (( ${AVAILABLE_TARGETS[(Ie)${TARGET}]} )); then
    error "invalid target ${TARGET}"
  fi

  for session in ${SESSIONS}; do
    if [[ ! -f "${ENV_DIR_PATH}/${TARGET}/${session}.sh" ]]; then
      error "invalid target's session ${session}"
    fi
  done
}


init_variables
parse_options "$@"
validate_options

start_target_tmux_env
