#!/bin/sh
# commands used:
# - xdg-user-dir

init_variables() {
  COMMAND=${0##*/}

  TYPE=
  PROJECT=
}

parse_command_line() {
  TYPE="$1"
  PROJECT="$2"
}

validate_command_line() {
  if [ -z "${TYPE}" ]; then
    exit_error 'Missing type argument'
  fi

  if [ "${TYPE}" != 'main' ] \
     && [ "${TYPE}" != 'repo' ] \
     && [ "${TYPE}" != 'docs' ] \
     && [ "${TYPE}" != 'logs' ]; then
    exit_error "Invalid type '${TYPE}'"
  fi
}

exit_error() {
  [ -z "$1" ] || echo "${COMMAND}: $1"
  exit 1
} >&2

get_project_path() {
  case "${TYPE}" in
    main)
      find "$( xdg-user-dir PROJECTS )"/* \
        -type d -prune -name "${PROJECT}"
      ;;
    repo)
      find "$( xdg-user-dir PROJECTS )"/*/* \
        -type d -prune -name "${PROJECT}"
      ;;
    docs)
      find "$( xdg-user-dir PROJECTS_DOCS )"/* \
        -type d -prune -name "${PROJECT}"
      ;;
    logs)
      find "$( xdg-user-dir PROJECTS_LOGS )"/* \
        -type d -prune -name "${PROJECT}"
      ;;
  esac
}

get_type_path() {
  case "${TYPE}" in
    main) xdg-user-dir PROJECTS ;;
    repo) xdg-user-dir PROJECTS ;;
    docs) xdg-user-dir PROJECTS_DOCS ;;
    logs) xdg-user-dir PROJECTS_LOGS ;;
  esac
}

display_path() {
  if [ -n "${PROJECT}" ]; then
    PROJECT_PATH="$( get_project_path )"
  else
    PROJECT_PATH="$( get_type_path )"
  fi

  if [ -z "${PROJECT_PATH}" ]; then
    echo 'No such project path' >&2
    return 1
  fi

  echo "${PROJECT_PATH}"
}

init_variables
parse_command_line "$@"
validate_command_line

display_path
