#!/bin/sh

init_variables() {
  COMMAND=${0##*/}

  THEME_FILE="${XDG_DATA_HOME:-$HOME/.local/share}/theme"

  ACTION='status'
  ONLY_SEND_OSC_SEQUENCES=false
  THEME=
}

parse_command_line() {
  while getopts s OPT; do
    case "${OPT}" in
      s) ONLY_SEND_OSC_SEQUENCES=true ;;
      ?) exit_error ;;
    esac
  done

  shift $(( OPTIND - 1 ))

  [ -z "$1" ] || ACTION="$1"
  [ -z "$2" ] || THEME="$2"
}

validate_command_line() {
  if [ "${ACTION}" != 'set' ] \
     && [ "${ACTION}" != 'status' ] \
     && [ "${ACTION}" != 'toggle' ]; then
    exit_error "Invalid action '${ACTION}'"
  fi

  if [ "${ACTION}" = 'set' ]; then
    if [ -z "${THEME}" ]; then
      exit_error 'missing theme'
    fi

    if [ "${THEME}" != 'dark' ] && [ "${THEME}" != 'light' ]; then
      exit_error "invalid theme ${THEME}"
    fi
  fi
}

exit_error() {
  [ -z "$1" ] || echo "${COMMAND}: $1"
  exit 1
} >&2

status_theme() {
  if [ -z "${THEME_FILE}" ]; then
    echo 'light'
    return
  fi

  sed 's/^THEME=\(.*\)$/\1/' "${THEME_FILE}"
}

set_theme() (
  echo 'Configuring theme...' >&2

  cd "$( project-path repo dotfiles )" || return 1

  # only use targets which contain some color configuration
  make -s THEME="${THEME}" \
    aerc-configs \
    amfora-configs \
    coreutils-configs \
    foot-configs \
    git-configs \
    i3blocks-configs \
    imv-configs \
    less-configs \
    mako-configs \
    qutebrowser-configs \
    ripgrep-configs \
    sway-configs \
    swaylock-configs \
    tmux-configs \
    vim-configs \
    w3m-configs \
    weechat-configs \
    zathura-configs \
    zsh-configs \
    images \
    i3blocks-scripts \
    shell-scripts

    echo "THEME=${THEME}" > "${THEME_FILE}"
)

toggle_theme() {
  if [ "$( status_theme )" = 'light' ]; then
    THEME='dark'
  else
    THEME='light'
  fi

  set_theme
}

reload_system() {
  echo 'Reloading system...' >&2

  pgrep -x sway > /dev/null && swaymsg reload

  pgrep -x mako > /dev/null && makoctl reload

  for s in "/tmp/tmux-$( id -u )"/*; do
    tmux -S "$s" source-file {dir/config}/tmux/tmux.conf

    # update colors of terminal underlying tmux
    "send_osc_sequence_${THEME}" > "$( tmux -S "$s" display-message -p '#{client_tty}' )"
  done 2> /dev/null

  pkill -x -USR1 vim

  pkill -x -USR1 zsh

  pgrep qutebrowser > /dev/null && qutebrowser -l error :config-source
}

send_osc_sequence_light() {
  # color numbers
  printf '\x1b]4;0;#43474e'
  printf '\x1b]4;1;#91033d'
  printf '\x1b]4;2;#557545'
  printf '\x1b]4;3;#916b01'
  printf '\x1b]4;4;#45719e'
  printf '\x1b]4;5;#756599'
  printf '\x1b]4;6;#1b7793'
  printf '\x1b]4;7;#edf1fa'
  printf '\x1b]4;8;#2d3138'
  printf '\x1b]4;9;#9a4318'
  printf '\x1b]4;10;#9a9ea7'
  printf '\x1b]4;11;#c8ccd5'
  printf '\x1b]4;12;#608bb9'
  printf '\x1b]4;13;#945b7f'
  printf '\x1b]4;14;#295984'
  printf '\x1b]4;15;#dfe3ec'

  printf '\x1b]10;#43474e' # foreground
  printf '\x1b]11;#edf1fa' # background
  printf '\x1b]12;#43474e' # cursor
  printf '\x1b]17;#43474e' # selection background
  printf '\x1b]19;#edf1fa' # selection foreground
}

send_osc_sequence_dark() {
  # color numbers
  printf '\x1b]4;0;#29313f'
  printf '\x1b]4;1;#e2768d'
  printf '\x1b]4;2;#a4c193'
  printf '\x1b]4;3;#f9d082'
  printf '\x1b]4;4;#99bde7'
  printf '\x1b]4;5;#c1b2e2'
  printf '\x1b]4;6;#81c3dd'
  printf '\x1b]4;7;#c7cfe1'
  printf '\x1b]4;8;#343c4a'
  printf '\x1b]4;9;#ee9b73'
  printf '\x1b]4;10;#464e5d'
  printf '\x1b]4;11;#687080'
  printf '\x1b]4;12;#b0d3ff'
  printf '\x1b]4;13;#dfa9ca'
  printf '\x1b]4;14;#799cc6'
  printf '\x1b]4;15;#e3ecfe'

  printf '\x1b]10;#c7cfe1' # foreground
  printf '\x1b]11;#29313f' # background
  printf '\x1b]12;#c7cfe1' # cursor
  printf '\x1b]17;#c7cfe1' # selection background
  printf '\x1b]19;#29313f' # selection foreground
}

init_variables
parse_command_line "$@"
validate_command_line

if [ "${ONLY_SEND_OSC_SEQUENCES}" = 'true' ]; then
  "send_osc_sequence_$( status_theme )"
  exit
fi

"${ACTION}_theme"

if [ "${ACTION}" = 'set' ] || [ "${ACTION}" = 'toggle' ]; then
  reload_system
fi
