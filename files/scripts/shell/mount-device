#!/bin/sh

init_variables() {
  COMMAND=${0##*/}

  KOBO_UUID='5BBA-D173'
  LACIE_UUID='957ed774-d551-43de-a233-9815013f7498'
  TDK_DATA_UUID='AFE8-B122'
  TDK_SECRET_UUID='0bd24e2d-cb0a-4c5b-accd-e428de86c1f0'
  TOSHIBA_UUID='fe36b1e1-8f91-4d1c-a0af-4327ecb1bd27'

  DEVICE_ID=
  UNMOUNT=false
}

parse_command_line() {
  while getopts u OPT; do
    case "${OPT}" in
      u) UNMOUNT=true ;;
      ?) exit_error ;;
    esac
  done

  shift $(( OPTIND - 1 ))

  DEVICE_ID="$1"
}

validate_command_line() {
  if [ -z "${DEVICE_ID}" ]; then
    exit_error 'missing operand'
  fi

  if [ "${DEVICE_ID}" != 'kobo' ] \
     && [ "${DEVICE_ID}" != 'lacie' ] \
     && [ "${DEVICE_ID}" != 'tdk_data' ] \
     && [ "${DEVICE_ID}" != 'tdk_secret' ] \
     && [ "${DEVICE_ID}" != 'toshiba' ]; then
    exit_error "Invalid device id '${DEVICE_ID}'"
  fi
}

exit_error() {
  [ -z "$1" ] || echo "${COMMAND}: $1"
  exit 1
} >&2

check_root_user() {
  [ "$( id -u )" -ne 0 ] && exit_error 'The script must be run as root'
}

mount_simple() {
  mkdir -p "/mnt/$2" \
  && mount "/dev/disk/by-uuid/$1" "/mnt/$2" \
  && printf 'mounted in /mnt/%s\n' "$2"
}

mount_simple_fat() {
  mkdir -p "/mnt/$2" \
  && mount -o umask=0 "/dev/disk/by-uuid/$1" "/mnt/$2" \
  && printf 'mounted in /mnt/%s\n' "$2"
}

mount_crypt() {
  cryptsetup open "/dev/disk/by-uuid/$1" "$2" \
  && mkdir -p "/mnt/$2" \
  && mount "/dev/mapper/$2" "/mnt/$2" \
  && printf 'mounted in /mnt/%s\n' "$2"
}

unmount_simple() {
  umount "/mnt/$1" \
  && printf 'unmounted /mnt/%s\n' "$1"
}

unmount_crypt() {
  umount "/mnt/$1" \
  && cryptsetup close "$1" \
  && printf 'unmounted /mnt/%s\n' "$1"
}

mount_device_kobo()       { mount_simple     "${KOBO_UUID}"       kobo       ; }
mount_device_lacie()      { mount_crypt      "${LACIE_UUID}"      lacie      ; }
mount_device_tdk_data()   { mount_simple_fat "${TDK_DATA_UUID}"   tdk_data   ; }
mount_device_tdk_secret() { mount_crypt      "${TDK_SECRET_UUID}" tdk_secret ; }
mount_device_toshiba()    { mount_crypt      "${TOSHIBA_UUID}"    toshiba    ; }

unmount_device_kobo()       { unmount_simple kobo       ; }
unmount_device_lacie()      { unmount_crypt  lacie      ; }
unmount_device_tdk_data()   { unmount_simple tdk_data   ; }
unmount_device_tdk_secret() { unmount_crypt  tdk_secret ; }
unmount_device_toshiba()    { unmount_crypt  toshiba    ; }

init_variables
parse_command_line "$@"
validate_command_line

check_root_user

if [ "${UNMOUNT}" = 'false' ]; then
  mount_device_"${DEVICE_ID}"
else
  unmount_device_"${DEVICE_ID}"
fi
