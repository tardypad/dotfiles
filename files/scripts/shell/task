#!/bin/sh

init_variables() {
  COMMAND=${0##*/}

  CURRENT_FILE_PATH="${XDG_RUNTIME_DIR:-/tmp}/task"
  TASKS_DIR="${XDG_DATA_HOME:-$HOME/.local/share}/tasks"

  ACTION='show'
  TASK_ID=
  TASK_NAME=
  TASK_COMMENT=
  LOG=false
  ID_WITH_NAME=false
}

parse_command_line() {
  while getopts nl OPT; do
    case "${OPT}" in
      n) ID_WITH_NAME=true ;;
      l) LOG=true ;;
      ?) exit_error ;;
    esac
  done

  shift $(( OPTIND - 1 ))

  [ -z "$1" ] || ACTION="$1"

  if [ "${ACTION}" = 'create' ]; then
    TASK_ID="$2"
    TASK_NAME="$3"
  elif [ "${ACTION}" = 'pick' ]; then
    TASK_ID="$2"
    TASK_COMMENT="$3"
  fi
}

validate_command_line() {
  if [ "${ACTION}" != 'create' ] \
     && [ "${ACTION}" != 'list' ] \
     && [ "${ACTION}" != 'pick' ] \
     && [ "${ACTION}" != 'show' ] \
     && [ "${ACTION}" != 'drop' ]; then
    exit_error "Invalid action '${ACTION}'"
  fi

  if [ "${ACTION}" = 'create' ] && [ -z "${TASK_ID}" ]; then
    exit_error 'Missing task identifier'
  fi

  if [ "${ACTION}" = 'pick' ] && [ -z "${TASK_ID}" ]; then
    exit_error 'Missing task identifier'
  fi
}

exit_error() {
  [ -z "$1" ] || echo "${COMMAND}: $1"
  exit 1
} >&2

task_create() {
  printf '%s\t%s\n' "${TASK_ID}" "${TASK_NAME}" \
    >> "${TASKS_DIR}"/local
}

task_pick() {
  if has_current_task; then
    task_drop
  fi

  if [ "${LOG}" = 'true' ]; then
    time-tracker start "${TASK_ID}" "${TASK_COMMENT}"
  fi

  printf '%s' "${TASK_ID}" > "${CURRENT_FILE_PATH}" \
    && update_i3blocks
}

task_show() {
  if ! has_current_task; then
    echo 'No current task' >&2
    return 1
  fi

  TASK_ID="$( cat "${CURRENT_FILE_PATH}" )"

  if [ "${ID_WITH_NAME}" = 'true' ]; then
    TASK_NAME="$(
      sed -n "s/^${TASK_ID}	\(.*\)/\1/p" "${TASKS_DIR}"/* 2> /dev/null \
        | sed 1q
    )"
    printf '%s\t%s\n' "${TASK_ID}" "${TASK_NAME}"
  else
    printf '%s\n' "${TASK_ID}"
  fi
}

task_drop() {
  if ! has_current_task; then
    echo 'No current task' >&2
    return 1
  fi

  time-tracker stop 2> /dev/null

  rm -rf "${CURRENT_FILE_PATH}" \
    && update_i3blocks
}

has_current_task() {
  [ -f "${CURRENT_FILE_PATH}" ]
}

task_list()
{
  RANGE='1'
  if [ "${ID_WITH_NAME}" = 'true' ]; then
    RANGE='1-2'
  fi

  cut -f"${RANGE}" "${TASKS_DIR}"/* 2> /dev/null \
    | sort -u
}

update_i3blocks() {
  pkill -x -RTMIN+6 i3blocks
}

init_variables
parse_command_line "$@"
validate_command_line

mkdir -p "${TASKS_DIR}"
"task_${ACTION}"
