#!/bin/sh

init_variables() {
  COMMAND=${0##*/}

  CURRENT_FILE_PATH="${XDG_RUNTIME_DIR:-/tmp}/task"
  LOGGING_DIR="${XDG_DATA_HOME:-$HOME/.local/share}/tasks"

  ACTION='show'
  TASK_ID=
  TASK_DESC=
  TASK_DURATION=
  LOGGING_DAY=$( date +%Y-%m-%d )
  GROUPED_DISPLAY=false
  TAB_SEPARATED=false
  LOG=true
}

parse_command_line() {
  while getopts gnt OPT; do
    case "${OPT}" in
      g) GROUPED_DISPLAY=true ;;
      n) LOG=false ;;
      t) TAB_SEPARATED=true ;;
      ?) exit_error ;;
    esac
  done

  shift $(( OPTIND - 1 ))

  [ -z "$1" ] || ACTION="$1"

  if [ "${ACTION}" = 'start' ]; then
    TASK_ID="$2"
    TASK_DESC="$3"
  elif [ "${ACTION}" = 'log' ]; then
    TASK_ID="$2"
    TASK_DURATION="$3"
    TASK_DESC="$4"
  elif [ "${ACTION}" = 'review' ] || [ "${ACTION}" = 'overview' ]; then
    [ -z "$2" ] || LOGGING_DAY="$2"
  fi
}

validate_command_line() {
  if [ "${ACTION}" != 'start' ] \
     && [ "${ACTION}" != 'stop' ] \
     && [ "${ACTION}" != 'show' ] \
     && [ "${ACTION}" != 'log' ] \
     && [ "${ACTION}" != 'review' ] \
     && [ "${ACTION}" != 'overview' ] \
     && [ "${ACTION}" != 'ids' ]; then
    exit_error "Invalid action '${ACTION}'"
  fi

  if [ "${ACTION}" = 'start' ] && [ -z "${TASK_ID}" ]; then
      exit_error 'Missing task identifier'
  fi

  if [ "${ACTION}" = 'log' ]; then
    if [ -z "${TASK_ID}" ]; then
      exit_error 'Missing task identifier'
    fi
    if [ -z "${TASK_DURATION}" ]; then
      exit_error 'Missing task duration'
    fi

    case "${TASK_DURATION}" in
      *[!0-9]*) exit_error 'task duration must be an integer' ;;
    esac
  fi

  if [ "${ACTION}" = 'review' ] || [ "${ACTION}" = 'overview' ]; then
    case "${LOGGING_DAY}" in
      [0-9][0-9][0-9][0-9]-[0-9][0-9]-[0-9][0-9]) ;;
      *) exit_error 'Invalid day format' ;;
    esac
  fi
}

exit_error() {
  [ -z "$1" ] || echo "${COMMAND}: $1"
  exit 1
} >&2

current_time_min() {
  CUR_HOURS=$( date +%H )
  CUR_MINUTES=$( date +%M )
  # values with leading 0 are interpreted as octals
  # which leads to issue with "08" and "09"
  # so we need to remove them
  echo $((
    ${CUR_HOURS#0} * 60 + ${CUR_MINUTES#0}
  ))
}

task_start() {
  if is_task_started; then
    task_stop
  fi

  if [ "${LOG}" = 'true' ]; then
    CURRENT_TIME=$( current_time_min )
  else
    CURRENT_TIME='X'
  fi

  printf '%s\t%s\t%s' \
    "${CURRENT_TIME}" "${TASK_ID}" "${TASK_DESC}" \
    > "${CURRENT_FILE_PATH}" \
    && update_i3blocks
}

task_show() {
  if ! is_task_started; then
    echo 'No current task' >&2
    return 1
  fi

  cut -f 2- "${CURRENT_FILE_PATH}"
}

task_stop() {
  if ! is_task_started; then
    echo 'No current task' >&2
    return 1
  fi

  START_TIME=$( cut -f 1 "${CURRENT_FILE_PATH}" )

  if [ "${START_TIME}" != 'X' ]; then
    CURRENT_DAY=$( date +%Y-%m-%d )
    CURRENT_TIME=$( current_time_min )
    CURRENT_DURATION=$(( CURRENT_TIME - START_TIME ))
    CURRENT_ID=$( cut -f 2 "${CURRENT_FILE_PATH}" )
    CURRENT_DESC=$( cut -f 3 "${CURRENT_FILE_PATH}" )

    printf '%s\t%s\t%s\n' \
      "${CURRENT_ID}" "${CURRENT_DURATION}"  "${CURRENT_DESC}" \
      >> "${LOGGING_DIR}/${CURRENT_DAY}"
  fi

  rm -rf "${CURRENT_FILE_PATH}" \
    && update_i3blocks
}

is_task_started() {
  [ -f "${CURRENT_FILE_PATH}" ]
}

task_ids()
{
  find "${LOGGING_DIR}" -type f \
    ! -name '.tags' \
    -exec cut -f1 {} \; \
    | sort -u
}

task_log()
{
  CURRENT_DAY=$( date +%Y-%m-%d )

  printf '%s\t%s\t%s\n' \
    "${TASK_ID}" "${TASK_DURATION}" "${TASK_DESC}" \
    >> "${LOGGING_DIR}/${CURRENT_DAY}"
}

task_review()
{
  "${EDITOR:-vi}" "${LOGGING_DIR}/${LOGGING_DAY}"
}

task_overview()
{
  if [ ! -f "${LOGGING_DIR}/${LOGGING_DAY}" ]; then
    return
  fi

  if [ "${TAB_SEPARATED}" = 'false' ]; then
    FORMAT_CMD='column -s "	" -t'
  else
    FORMAT_CMD='cat'
  fi

  if [ "${GROUPED_DISPLAY}" = 'false' ]; then
    eval "${FORMAT_CMD}" "${LOGGING_DIR}/${LOGGING_DAY}"
    return
  fi

  awk -v FS='\t' -v OFS='\t' \
    '{
      sum[$1] += $2;
      if ($3 && desc[$1] !~ $3", ")
        desc[$1] = desc[$1] $3", "
     }
    END {
      for (id in sum)
      print id, sum[id], desc[id]
    }' \
    "${LOGGING_DIR}/${LOGGING_DAY}" \
    | sed 's/, $//' \
    | eval "${FORMAT_CMD}"
}

update_i3blocks() {
  pkill -x -RTMIN+6 i3blocks
}

init_variables
parse_command_line "$@"
validate_command_line

mkdir -p "${LOGGING_DIR}"
"task_${ACTION}"
