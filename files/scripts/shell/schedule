#!/bin/sh

init_variables() {
  COMMAND=${0##*/}

  PERIOD='today'
}

parse_command_line() {
  [ -z "$1" ] || PERIOD="$1"
}

validate_command_line() {
  if [ "${PERIOD}" != 'today' ] \
     && [ "${PERIOD}" != 'week' ] \
     && [ "${PERIOD}" != 'week_next' ] \
     && [ "${PERIOD}" != 'month' ] \
     && [ "${PERIOD}" != 'month_next' ]; then
    exit_error "Invalid period '${PERIOD}'"
  fi
}

exit_error() {
  [ -z "$1" ] || echo "${COMMAND}: $1"
  exit 1
} >&2

schedule_today() {
  rem -s -b1 \
    | grep "$( date +%Y/%m/%d )" \
    | cut -d' ' -f6- \
    | sed -e 's/\(.*\) (.*)$/\1/' \
          -e '/^[0-9]/s/ /\t/' \
          -e '/^[^0-9]/s/^/\t/' \
    | column -t -s '	' \
    | sed 's/^ *//' \
    | awk '!found && /^[^0-9]/ { print ""; found=1 } 1'
}

schedule_week() {
  rem -cu+1 -b1 -m
}

schedule_week_next() {
  rem -cu+2 -b1 -m -w"$( tput cols )" \
    | awk '/^â”œ/ {p+=1} p!=1'
}

schedule_month() {
  rem -cu1 -b1 -m
}

schedule_month_next() {
  rem -cu2 -b1 -m -w"$( tput cols )" \
    | awk '// {p=1; print substr($1,2); next} p'
}

init_variables
parse_command_line "$@"
validate_command_line

"schedule_${PERIOD}"
