#!/bin/sh

init_variables() {
  COMMAND=${0##*/}

  FEEDS_PATH="${HOME}/.sfeed/feeds"

  VIEW_SCRIPT="sed -e 's/\\n/\n/g' -e 's/\\t/\t/g' | w3m -T text/html"

  FEED=
  PERIOD=36
}

parse_command_line() {
  while getopts t: OPT; do
    case "${OPT}" in
      t) PERIOD="${OPTARG}" ;;
      ?) exit_error ;;
    esac
  done

  shift $(( OPTIND - 1 ))

  FEED="$1"
}

validate_command_line() {
  if [ -n "${FEED}" ] && [ ! -f "${FEEDS_PATH}/${FEED}" ]; then
    exit_error "Invalid feed name '${FEED}'"
  fi

  case "${PERIOD}" in
    *[!0-9]*) exit_error 'period must be an integer' ;;
  esac
}

exit_error() {
  [ -z "$1" ] || echo "${COMMAND}: $1"
  exit 1
} >&2

should_update() {
  [ -d "${FEEDS_PATH}" ] || return 0

  FEED_LAST_MODIFIED=$(
    find "${FEEDS_PATH}" -type f \
      ! -path "${FEEDS_PATH}/old/*" \
      -exec stat -c '%Y' {} \; \
    | sort \
    | tail -n 1
  )
  CURRENT_TIME=$( date +%s )

  # update if last update is more than 4H ago
  [ $(( CURRENT_TIME - FEED_LAST_MODIFIED )) -gt 14400 ]
}

read_feed() {
  FEED_PATH="$1"

  FEED_HEADER="$(
    # shellcheck disable=SC1083
    printf \
      "$( tput bold )$( tput setaf {color/base0A/number} )%s\n " \
      "${FEED_PATH##*/}"
  )"

  awk -v FS='\t' -v OFS='\t' "\
    {
      if (int(\$1) >= ( strftime(\"%s\") - ( ${PERIOD} * 3600 ) ) ) {
        \$1 = strftime(\"%c\", \$1);
        print \$1,\$2,\$3,\$4,\$7;
      }
    }" "${FEED_PATH}" \
    | fzf -d '\t' \
          --disabled \
          --exit-0 \
          --tac \
          --layout reverse \
          --height 100% \
          --with-nth 2 \
          --info hidden \
          --header "${FEED_HEADER}" \
          --preview "printf '%s\n%s\n\n' {1} {5}; echo {4} | ${VIEW_SCRIPT} -dump" \
          --preview-window 'down:60%:sharp' \
          --bind "{key/return/return}:execute(echo {4} | ${VIEW_SCRIPT})" \
          --bind "ctrl-{key/open/low}:execute-silent(xdg-open {3} &)" \
          --bind "change:ignore" \
          --bind "space:toggle-search" \
          --bind "{key/goto_top}:first" \
          --bind "{key/goto_bottom}:last" \
          --bind "{key/up}:up" \
          --bind "{key/down}:down" \
          --bind "ctrl-{key/scroll_up/low}:half-page-up" \
          --bind "ctrl-{key/scroll_down/low}:half-page-down" \
          --bind "ctrl-{key/scroll_page_up/low}:page-up" \
          --bind "ctrl-{key/scroll_page_down/low}:page-down"

    return 0
}

read_all_feeds() {
  find "${FEEDS_PATH}" -type f ! -name '*.gz' \
    | sort \
    | while read -r FEED_PATH; do
        read_feed "${FEED_PATH}"
      done
}

init_variables
parse_command_line "$@"
validate_command_line

should_update && {
  echo 'Fetching news...'
  sfeed_update
}

if [ -n "${FEED}" ]; then
  read_feed "${FEEDS_PATH}/${FEED}"
else
  read_all_feeds
fi
