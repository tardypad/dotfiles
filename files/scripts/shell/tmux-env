#!/bin/sh

init_variables() {
  COMMAND=${0##*/}

  ENV_DIR_PATH="${XDG_DATA_HOME:-$HOME/.local/share}/env/tmux"

  BACKGROUND=false

  ENV_ID=
  SESSION=
}

parse_command_line() {
  while getopts b OPT; do
    case "${OPT}" in
      b) BACKGROUND=true ;;
      ?) exit_error ;;
    esac
  done

  shift $(( OPTIND - 1 ))

  ENV_ID="$1"
  SESSION="$2"
}

validate_command_line() {
  if [ -n "${TMUX}" ]; then
    exit_error "nested tmux env is not allowed"
  fi

  if [ -z "${ENV_ID}" ]; then
    exit_error 'missing environment identifier'
  fi

  if [ ! -d "${ENV_DIR_PATH}/${ENV_ID}" ]; then
    exit_error "invalid environment ${ENV_ID}"
  fi

  if [ -n "${SESSION}" ] \
     && [ ! -f "${ENV_DIR_PATH}/${ENV_ID}/${SESSION}.sh" ]; then
    exit_error "invalid environment's session ${SESSION}"
  fi
}

exit_error() {
  [ -z "$1" ] || echo "${COMMAND}: $1"
  exit 1
} >&2

is_session_present() {
  tmux -L "${ENV_ID}" list-sessions -F '#{session_name}' 2> /dev/null \
    | grep -q "^${SESSION}$"
}

start_tmux_env() {
  if [ -n "${SESSION}" ]; then
    if ! is_session_present; then
      SCRIPT_PATH="${ENV_DIR_PATH}/${ENV_ID}/${SESSION}.sh"
      "${SCRIPT_PATH}" "${ENV_ID}" "${SESSION}"
    fi
  else
    SESSION='new'
    if ! is_session_present; then
      tmux -L "${ENV_ID}" new-session -d -s "${SESSION}"
    fi
  fi

  tmux -L "${ENV_ID}" \
    set-option -g detach-on-destroy off \; \
    set-option -w -g allow-rename off \; \
    set-option -w -g automatic-rename off

  if [ "${BACKGROUND}" = 'false' ]; then
    tmux -L "${ENV_ID}" attach-session -t "${SESSION}" > /dev/null 2>&1
  else
    tmux -L "${ENV_ID}" switch-client -t "${SESSION}" > /dev/null 2>&1
  fi
}

init_variables
parse_command_line "$@"
validate_command_line

start_tmux_env
