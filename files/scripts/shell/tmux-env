#!/bin/sh

init_variables() {
  COMMAND=${0##*/}

  ENV_DIR_PATH="${XDG_DATA_HOME:-$HOME/.local/share}/env/tmux"

  BACKGROUND=false

  TARGET=
  SESSION=
}

parse_command_line() {
  while getopts b OPT; do
    case "${OPT}" in
      b) BACKGROUND=true ;;
      ?) exit_error ;;
    esac
  done

  shift $(( OPTIND - 1 ))

  TARGET="$1"
  SESSION="$2"
}

validate_command_line() {
  if [ -n "${TMUX}" ]; then
    exit_error "nested tmux env is not allowed"
  fi

  if [ -z "${TARGET}" ]; then
    exit_error 'missing target'
  fi

  if [ ! -d "${ENV_DIR_PATH}/${TARGET}" ]; then
    exit_error "invalid target ${TARGET}"
  fi

  if [ -n "${SESSION}" ] \
     && [ ! -f "${ENV_DIR_PATH}/${TARGET}/${SESSION}.sh" ]; then
    exit_error "invalid target's session ${SESSION}"
  fi
}

exit_error() {
  [ -z "$1" ] || echo "${COMMAND}: $1"
  exit 1
} >&2

is_session_present() {
  tmux -L "${TARGET}" list-sessions -F '#{session_name}' 2> /dev/null \
    | grep -q "^${SESSION}$"
}

start_target_tmux_env() {
  if [ -n "${SESSION}" ]; then
    if ! is_session_present; then
      SCRIPT_PATH="${ENV_DIR_PATH}/${TARGET}/${SESSION}.sh"
      TMUX_ENV=yes "${SCRIPT_PATH}" "${TARGET}" "${SESSION}"
    fi
  else
    SESSION='new'
    if ! is_session_present; then
      TMUX_ENV=yes tmux -L "${TARGET}" new-session -d -s "${SESSION}"
    fi
  fi

  if [ "${BACKGROUND}" = 'false' ]; then
    tmux -L "${TARGET}" attach-session -t "${SESSION}" > /dev/null 2>&1
  else
    tmux -L "${TARGET}" switch-client -t "${SESSION}" > /dev/null 2>&1
  fi
}

init_variables
parse_command_line "$@"
validate_command_line

start_target_tmux_env
