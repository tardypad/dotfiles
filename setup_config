#!/usr/bin/env zsh

COMMAND=${0:t}

init_variables() {
  AVAILABLE_TOOLS=( $(
    find . -maxdepth 1 -type d ! -name '.*' -printf '%f\n' \
      | sort
  ) )
  TOOLS=( ${AVAILABLE_TOOLS} )

  CONFIG_DIR="${XDG_CONFIG_HOME:-$HOME/.config}"
  DATA_DIR="${XDG_DATA_HOME:-$HOME/.local/share}"
  CACHE_DIR="${XDG_CACHE_HOME:-$HOME/.cache}"
}


usage() {
  cat << EOF
usage: ${COMMAND} [<options>] [<tools>]

Setup tools' config locally

Options:
  -h,  --help     show this message only

Available tools:
$( printf '%s\n' "${AVAILABLE_TOOLS[@]}" | column -c 50 -x )
If no tool argument is passed, all of them are setup
EOF
}


error() {
  if [[ -n "$1" ]]; then
    echo "error: $1" >&2
  fi
  usage
  exit 1
}


copy() {
  local repo_source_path="$1"
  local target_path="$2"

  [ -e "${repo_source_path}" ] || return 1

  cp --recursive --force --no-target-directory \
    "${repo_source_path}" "${target_path}"
}


run_function_if_exists() {
  command -v "$1" > /dev/null 2>&1 && "$1" "${@:2}"
}


setup_start() {
  local tool="$1"

  echo -n "… setup ${tool}"
}


setup_end() {
  local tool="$1"

  echo -e "\r$(tput setaf 2)✔$(tput sgr0) setup ${tool}$(tput el)"
}


setup() {
  for tool in ${TOOLS}; do
    setup_start "${tool}"

    [[ -f "${tool}/setup.sh" ]] && source "${tool}/setup.sh"
    [[ -f "${tool}/setup.local.sh" ]] && source "${tool}/setup.local.sh"

    run_function_if_exists "${tool}::setup"
    run_function_if_exists "${tool}::setup_local"

    setup_end "${tool}"
  done
}


parse_options() {
  while [[ "$#" -gt 0 ]]; do
    case "$1" in
      -h|--help)
        usage
        exit 0
        ;;
      *)
        break 2
        ;;
    esac
  done

  # Everything after the last recognized option is assumed to be a tool
  [[ $# -eq 0 ]] || TOOLS=( "$@" )
}


validate_options() {
  # validate each tool value
  for tool in ${TOOLS}; do
    if ! (( ${AVAILABLE_TOOLS[(Ie)${tool}]} )); then
      error "invalid tool ${tool}"
    fi
  done
}


init_variables
parse_options "$@"
validate_options

setup
